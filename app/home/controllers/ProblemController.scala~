package controllers

import javax.inject.Inject
import javax.inject.Singleton

import device.models.ProblemResponse
import device.utils.LocationUtils
import play.api.mvc.AbstractController
import play.api.mvc.ControllerComponents

import scala.concurrent.Await
import scala.concurrent.duration.Duration
import play.api.libs.json.Json
import service.ProblemService


/**
  * This controller creates an `Action` to handle HTTP requests to the
  * application's home page.
  */
@Singleton
class ProblemController @Inject()(cc: ControllerComponents) extends AbstractController(cc) with Secured{

  def index =  withAuth { username => implicit request =>
    //try {
      val weekly = Await.result(ProblemService.listWeekly(), Duration.Inf)
      val lstProvince = Await.result(ProblemService.listProvinceByWeek(weekly(0)._2), Duration.Inf)
      val location = lstProvince.map(x=> LocationUtils.getRegionByProvince(x._1) -> LocationUtils.getNameProvincebyCode(x._1)).filter(x=> x._1 != "").distinct.sorted
      val deviceType = lstProvince.map(x=> x._2 -> x._3).groupBy(x=> x._1).map(y=> y._1 -> y._2.map(x=> x._2).sum).toArray

      Ok(device.views.html.problem.index(ProblemResponse(weekly, location, deviceType), username, controllers.routes.ProblemController.index()))
    /*}
    catch{
      case e: Exception => Ok(device.views.html.problem.index(null, username, controllers.routes.ProblemController.index()))
    }*/
  }

  def getJsonProblem(date: String) = Action { implicit request =>
    //try{
      val date = request.body.asFormUrlEncoded.get("date").head
      val province = request.body.asFormUrlEncoded.get("province").head
      val lstProvince = Await.result(ProblemService.listProvinceByWeek(date), Duration.Inf)
      val location = lstProvince.map(x=> LocationUtils.getRegionByProvince(x._1) -> LocationUtils.getNameProvincebyCode(x._1)).filter(x=> x._1 != "").distinct.sorted
      val deviceType = lstProvince.map(x=> x._2 -> x._3).groupBy(x=> x._1).map(y=> y._1 -> y._2.map(x=> x._2).sum).toArray
      val objLocation = Json.obj(
        "key"  -> location.map(x=> x._1).distinct.sorted,
        "data" -> location
      )
      val objDevType = Json.obj(
        "data" -> deviceType,
        "sum"  -> deviceType.map(x=> x._2).sum
      )
      val rs = Json.obj(
        "location"   -> objLocation,
        "deviceType" -> objDevType
      )
      Ok(Json.toJson(rs))
   /* }
    catch{
      case e: Exception => Ok("Error")
    }*/
  }
}



